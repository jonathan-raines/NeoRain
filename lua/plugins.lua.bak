return {
  ---------------
  -- Telescope --
  ---------------
  {
    'nvim-telescope/telescope.nvim',
    requires = {
      'nvim-lua/plenary.nvim',
      'kyazdani42/nvim-web-devicons',
    },
    setup = function()
      require 'configs.telescope-nvim'.setup()
    end,
    config = function()
      require 'configs.telescope-nvim'.config()
    end,
  },

  {
    'nvim-telescope/telescope-fzf-native.nvim',
    config = function()
      require 'telescope'.load_extension 'fzf'
    end,
    run = 'make',
    cond = vim.fn.executable 'make' == 1
  },

  ---------
  -- Git --
  ---------
  {
    'lewis6991/gitsigns.nvim',
    requires = 'nvim-lua/plenary.nvim',
    config = function()
      require 'configs.gitsigns'.config()
    end,
  },

  {
    'tpope/vim-fugitive',
    config = function()
      vim.keymap.set('n', '<leader>gg', vim.cmd.Git, { desc = 'Fugitive' })
    end
  },

  ---------------------
  -- Language Server --
  ---------------------
  {
    'neovim/nvim-lspconfig',
    config = function()
      require 'configs.lsp'
    end
  },

  {
    'SmiteshP/nvim-navic',
    requires = 'neovim/nvim-lspconfig',
  },

  ----------
  -- MISC --
  ----------
  {
    'vim-test/vim-test',
    setup = function()
      require 'configs.vim-test'.setup()
    end,
    config = function()
      require 'configs.vim-test'.config()
    end,
    cmd = { 'TestFile', 'TestLast', 'TestNearest', 'TestSuite', 'TestVisit' }
  },

  {
    'numToStr/Comment.nvim',
    requires = {
      'JoosepAlviste/nvim-ts-context-commentstring',
      config = function()
        require 'nvim-treesitter.configs'.setup {
          context_commentstring = { enable = true }
        }
      end
    },
    config = function()
      require 'Comment'.setup {
        ignore = '^$',
        pre_hook = require 'ts_context_commentstring.integrations.comment_nvim'.create_pre_hook(),
      }
    end
  },

  {
    'cbochs/grapple.nvim',
    setup = function()
      require 'configs.grapple'.setup()
    end,
    config = function()
      require 'configs.grapple'.config()
    end
  },

  {
    'mbbill/undotree',
    setup = function()
      vim.keymap.set('n', '<leader>u', vim.cmd.UndotreeToggle, { desc = 'Undotree' })
    end,
    cmd = 'UndotreeToggle'
  },

  --------------------
  -- Autocompletion --
  --------------------
  {
    'hrsh7th/nvim-cmp',
    requires = {
      {
        'L3MON4D3/LuaSnip',
        config = function()
          require 'luasnip/loaders/from_vscode'.lazy_load()
        end,
      },
      'hrsh7th/cmp-nvim-lsp',
      'saadparwaiz1/cmp_luasnip',
      'hrsh7th/cmp-nvim-lua',
      'hrsh7th/cmp-buffer',
      'hrsh7th/cmp-path',
    },
    config = function()
      require 'configs.nvim-cmp'
    end,
  },

  ----------------
  -- Treesitter --
  ----------------
  {
    'nvim-treesitter/nvim-treesitter',
    config = function()
      require 'configs.nvim-treesitter'
    end,
    run = function()
      require 'nvim-treesitter.install'.update { with_sync = true }
    end
  },

  { 'nvim-treesitter/nvim-treesitter-textobjects', after = 'nvim-treesitter' },

  -------------------
  -- COLOR SCHEMES --
  -------------------

  {
    'sainnhe/sonokai',
    config = function()
      require 'configs.colorschemes.sonokai'

      vim.cmd [[ colorscheme sonokai ]]
    end
  }
}
